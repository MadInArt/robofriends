{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchField.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","username","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchField","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0d11c45.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, username, email ,id}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-blue dib b3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{username}</p>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t\treturn(\r\n\t\t\t\t<div>\t{\r\n\t\t\t\t\trobots.map((user,i) => {\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\t\tkey = {i}\r\n\t\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\t\tname ={robots[i].name} \r\n\t\t\t\t\t\t\t\tusername ={robots[i].username}\r\n\t\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t\t\t/>);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchField = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t<div>\r\n\t\t<input \r\n\t\tclassName=\"pa3 ma1 ba b--blue bg-lightest-blue\"\r\n\t\t type=\"search\"\r\n\t\t  placeholder =\"Find your robot...\" \r\n\t\t  onChange ={searchChange}\r\n\t\t  />\r\n\t</div>\r\n\t\t) \r\n\r\n}\r\n\r\nexport default SearchField;","import React from 'react'\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style ={{overflowY:'scroll', border: '1px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React , {Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList';\r\nimport SearchField from '../components/SearchField';\r\nimport Scroll from '../components/Scroll';\r\nimport './RoboFont.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn{\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots:() => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component  {\r\n\r\n  componentDidMount() {\r\n  \t\tthis.props.onRequestRobots();\r\n  }\r\n\r\n\r\nrender(){\r\n\r\n\tconst { searchField, onSearchChange,robots,isPending } = this.props;\r\n\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t})\r\n\r\n\treturn isPending? \r\n\t<h1>Loading</h1>: \r\n\t(\r\n\t<div className =\"tc\">\r\n\t\t<div>\r\n\t\t\t<h1 className='f1'>Robofriends</h1>\r\n\t\t\t\t<SearchField searchChange ={onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t</div>\r\n\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCHFIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n\r\n } \r\n from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n\ttype: CHANGE_SEARCHFIELD,\r\n\tpayload: text\t\r\n\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\t   fetch('https://jsonplaceholder.typicode.com/users')\r\n\t      .then(response=> response.json())\r\n\t      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t      .then(error => dispatch({type:\tREQUEST_ROBOTS_FAILED, payload: error}))\r\n\r\n\r\n}","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCHFIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED\r\n } \r\n from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {}) => {\r\n\tswitch(action.type)\t{\r\n\t\tcase CHANGE_SEARCHFIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField:action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {}) => {\r\n\tswitch(action.type)\t{\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots:action.payload, isPending:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error:action.payload, isPending:false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t  }\r\n}","    \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport './index.css';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\t\n\n"],"sourceRoot":""}